Description: elixir-cluster

Parameters: 

  VpcId: 
    Type: String
    Description: VPC the cluster will be deployed in

  ExternalCidr: 
    Type: String
    Description: CIDR range that can access SSH

  InternalCidr: 
    Type: String
    Description: CIDR range that can access all ports

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: elixir-security-group
      GroupDescription: elixir-security-group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref ExternalCidr
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref InternalCidr
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /

  Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: elixir-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: ec2:DescribeInstances
          Resource: "*"
      Roles:
      - !Ref Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref Role

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-1b2bde79
      SecurityGroups:
      - !Ref SecurityGroup
      InstanceType: m3.medium
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: true
      KeyName: elixir-cluster-key-pair
      UserData: !Base64 |
        #!/bin/bash -x

        # erlang requires home env var
        export HOME="/root"
        
        # install packages
        wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
        dpkg -i erlang-solutions_1.0_all.deb
        apt-get update
        apt-get install -y esl-erlang elixir git awscli

        # install datadog agent
        apt-get update
        apt-get install apt-transport-https
        sh -c "echo 'deb https://apt.datadoghq.com/ stable main' > /etc/apt/sources.list.d/datadog.list"
        apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 C7A7DA52
        apt-get update
        apt-get install datadog-agent
        sh -c "sed 's/api_key:.*/api_key: XXXXXXXXXX/' /etc/dd-agent/datadog.conf.example > /etc/dd-agent/datadog.conf"
        /etc/init.d/datadog-agent start

        # download and build application
        cd /opt
        git clone https://github.com/benjaminkoffel/elixir-cluster.git
        cd elixir-cluster
        mix local.hex --force && mix deps.get && mix release

        # set hostname and address from instance metadata
        HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname | sed 's/[.].*$//')
        ADDRESS=$(echo $HOSTNAME | sed 's/ip-//g' | sed 's/[-]/\./g')
        sudo hostnamectl set-hostname $HOSTNAME
        echo "127.0.0.1 ${HOSTNAME}" >> /etc/hosts
        sed -i -e "s/\-name.*/\-name $HOSTNAME\@$ADDRESS/g" _build/dev/rel/app/releases/0.1.0/vm.args

        # create .hosts.txt file containing other nodes
        aws ec2 describe-instances \
          --region ap-southeast-2 \
          --query 'Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddresses[].PrivateDnsName' \
          --output text \
          --filter Name=tag:Project,Values=elixir-cluster \
          | sed '$!N;s/\t/\n/' \
          | sed 's/[.].*$//' \
          | sed 's@ip\-\(.*\)\-\(.*\)\-\(.*\)\-\(.*\)@ip\-\1\-\2\-\3\-\4\@\1\.\2\.\3\.\4@' \
          > _build/dev/rel/app/.hosts.txt

        # run application as daemon
        _build/dev/rel/app/bin/app start

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - subnet-5ed50529
      - subnet-1954ff7c
      LaunchConfigurationName: !Ref LaunchConfiguration
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 8
      Tags:
      - Key: Owner
        Value: bkoffel@seek.com.au
        PropagateAtLaunch: true
      - Key: Project
        Value: elixir-cluster
        PropagateAtLaunch: true
      - Key: Stream
        Value: security
        PropagateAtLaunch: true

  ScalingPolicyOut:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
  
  ScalingPolicyIn:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

  AlarmOut:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 90
      Period: 60
      AlarmActions: 
      - !Ref ScalingPolicyOut
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  AlarmIn:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Average
      Threshold: 40
      Period: 60
      AlarmActions: 
      - !Ref ScalingPolicyIn
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
